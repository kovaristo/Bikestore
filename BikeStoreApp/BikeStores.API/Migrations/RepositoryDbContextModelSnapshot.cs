// <auto-generated />
using System;
using BikeStores.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BikeStores.API.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    partial class RepositoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BikeStores.Domain.Entities.Production.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("brand_name");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_created");

                    b.Property<DateTime?>("WhenModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_modified");

                    b.HasKey("Id")
                        .HasName("PK_Brands");

                    b.ToTable("brands", "production");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            Name = "Kross",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 768, DateTimeKind.Local).AddTicks(7305)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "system",
                            Name = "Romet",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 768, DateTimeKind.Local).AddTicks(7344)
                        });
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Production.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_created");

                    b.Property<DateTime?>("WhenModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_modified");

                    b.HasKey("Id")
                        .HasName("PK_Categories");

                    b.ToTable("categories", "production");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            Name = "Trekking bicycles",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(922)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "system",
                            Name = "Universal bicycles",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(935)
                        });
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Production.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("list_price");

                    b.Property<short>("ModelYear")
                        .HasColumnType("smallint")
                        .HasColumnName("model_year");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_name");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_created");

                    b.Property<DateTime?>("WhenModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_modified");

                    b.HasKey("Id")
                        .HasName("PK_Products");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products", "production");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedBy = "system",
                            ListPrice = 123m,
                            ModelYear = (short)2020,
                            Name = "Kross Adventure 1",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(3043)
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedBy = "system",
                            ListPrice = 79m,
                            ModelYear = (short)2021,
                            Name = "Kross Hardcore 2",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(3056)
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CategoryId = 2,
                            CreatedBy = "system",
                            ListPrice = 37m,
                            ModelYear = (short)2023,
                            Name = "Kross Family 2",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(3058)
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            CategoryId = 2,
                            CreatedBy = "system",
                            ListPrice = 62m,
                            ModelYear = (short)2022,
                            Name = "Kross Common 1",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(3060)
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 2,
                            CategoryId = 1,
                            CreatedBy = "system",
                            ListPrice = 231m,
                            ModelYear = (short)2021,
                            Name = "Romet Gazela 2",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(3061)
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 2,
                            CategoryId = 1,
                            CreatedBy = "system",
                            ListPrice = 193m,
                            ModelYear = (short)2022,
                            Name = "Romet Alicia 3",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(3063)
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 2,
                            CategoryId = 2,
                            CreatedBy = "system",
                            ListPrice = 56m,
                            ModelYear = (short)2022,
                            Name = "Romet Universal 1",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(3065)
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 2,
                            CategoryId = 2,
                            CreatedBy = "system",
                            ListPrice = 63m,
                            ModelYear = (short)2023,
                            Name = "Romel Universal 2",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(3066)
                        });
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Production.Stock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_created");

                    b.Property<DateTime?>("WhenModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_modified");

                    b.HasKey("StoreId", "ProductId")
                        .HasName("PK_Stocks");

                    b.HasIndex("ProductId");

                    b.ToTable("stocks", "production");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            ProductId = 1,
                            CreatedBy = "system",
                            Quantity = 13,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(7606)
                        },
                        new
                        {
                            StoreId = 1,
                            ProductId = 2,
                            CreatedBy = "system",
                            Quantity = 17,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(7619)
                        },
                        new
                        {
                            StoreId = 2,
                            ProductId = 1,
                            CreatedBy = "system",
                            Quantity = 23,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(7621)
                        },
                        new
                        {
                            StoreId = 2,
                            ProductId = 2,
                            CreatedBy = "system",
                            Quantity = 7,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 769, DateTimeKind.Local).AddTicks(7622)
                        });
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("street");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_created");

                    b.Property<DateTime?>("WhenModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_modified");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.ToTable("customers", "sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Radom",
                            CreatedBy = "system",
                            Email = "jan.nowak@gmail.com",
                            Firstname = "Jan",
                            Lastname = "Nowak",
                            Phone = "+48555666777",
                            State = "Mazowieckie",
                            Street = "Cisowa 7/23",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 770, DateTimeKind.Local).AddTicks(757),
                            ZipCode = "26611"
                        },
                        new
                        {
                            Id = 2,
                            City = "Kielce",
                            CreatedBy = "system",
                            Email = "adam.kowalski@gmail.com",
                            Firstname = "Adam",
                            Lastname = "Kowalski",
                            Phone = "+48555999444",
                            State = "Świetokrzyskie",
                            Street = "Galenowa 13/2",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 770, DateTimeKind.Local).AddTicks(770),
                            ZipCode = "25705"
                        });
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("order_date");

                    b.Property<byte>("OrderStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("required_date");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("shipped_date");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_created");

                    b.Property<DateTime?>("WhenModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_modified");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("orders", "sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "system",
                            CustomerId = 1,
                            OrderDate = new DateTime(2021, 8, 5, 11, 30, 27, 770, DateTimeKind.Local).AddTicks(2798),
                            OrderStatus = (byte)0,
                            RequiredDate = new DateTime(2021, 8, 31, 11, 30, 27, 770, DateTimeKind.Local).AddTicks(2800),
                            StaffId = 2,
                            StoreId = 1,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 770, DateTimeKind.Local).AddTicks(2788)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "system",
                            CustomerId = 2,
                            OrderDate = new DateTime(2021, 7, 22, 11, 30, 27, 770, DateTimeKind.Local).AddTicks(2805),
                            OrderStatus = (byte)5,
                            RequiredDate = new DateTime(2021, 8, 16, 11, 30, 27, 770, DateTimeKind.Local).AddTicks(2806),
                            ShippedDate = new DateTime(2023, 12, 21, 23, 3, 27, 770, DateTimeKind.Local).AddTicks(2807),
                            StaffId = 2,
                            StoreId = 1,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 770, DateTimeKind.Local).AddTicks(2803)
                        });
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("discount");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("list_price");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_created");

                    b.Property<DateTime?>("WhenModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_modified");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items", "sales");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ItemId = 1,
                            CreatedBy = "system",
                            Discount = 10m,
                            ListPrice = 123m,
                            ProductId = 1,
                            Quantity = 1,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 770, DateTimeKind.Local).AddTicks(8794)
                        },
                        new
                        {
                            OrderId = 1,
                            ItemId = 2,
                            CreatedBy = "system",
                            Discount = 5m,
                            ListPrice = 35m,
                            ProductId = 3,
                            Quantity = 2,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 770, DateTimeKind.Local).AddTicks(8808)
                        },
                        new
                        {
                            OrderId = 2,
                            ItemId = 1,
                            CreatedBy = "system",
                            Discount = 2m,
                            ListPrice = 33m,
                            ProductId = 3,
                            Quantity = 3,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 771, DateTimeKind.Local).AddTicks(106)
                        },
                        new
                        {
                            OrderId = 2,
                            ItemId = 2,
                            CreatedBy = "system",
                            Discount = 17m,
                            ListPrice = 223m,
                            ProductId = 5,
                            Quantity = 5,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 771, DateTimeKind.Local).AddTicks(112)
                        });
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Active")
                        .HasColumnType("tinyint")
                        .HasColumnName("active");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phone");

                    b.Property<int?>("StoreId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_created");

                    b.Property<DateTime?>("WhenModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_modified");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StoreId");

                    b.ToTable("staffs", "sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = (byte)1,
                            CreatedBy = "system",
                            Email = "adam.manager@radom.bikestores.org",
                            Firstname = "Adam",
                            Lastname = "Manager",
                            Phone = "+48654234201",
                            StoreId = 1,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 771, DateTimeKind.Local).AddTicks(4852)
                        },
                        new
                        {
                            Id = 2,
                            Active = (byte)1,
                            CreatedBy = "system",
                            Email = "anna.pracownik@radom.bikestores.org",
                            Firstname = "Anna",
                            Lastname = "Pracownik",
                            ManagerId = 1,
                            Phone = "+48654234202",
                            StoreId = 2,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 771, DateTimeKind.Local).AddTicks(4864)
                        },
                        new
                        {
                            Id = 3,
                            Active = (byte)1,
                            CreatedBy = "system",
                            Email = "krzysztof.pracownik@radom.bikestores.org",
                            Firstname = "Krzysztof",
                            Lastname = "Pracownik",
                            ManagerId = 2,
                            Phone = "+48654234201",
                            StoreId = 2,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 771, DateTimeKind.Local).AddTicks(4866)
                        },
                        new
                        {
                            Id = 4,
                            Active = (byte)1,
                            CreatedBy = "system",
                            Email = "janina.manager@kielce.bikestores.org",
                            Firstname = "Janina",
                            Lastname = "Manager",
                            Phone = "+48654234201",
                            StoreId = 1,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 771, DateTimeKind.Local).AddTicks(4868)
                        },
                        new
                        {
                            Id = 5,
                            Active = (byte)1,
                            CreatedBy = "system",
                            Email = "julian.pracownik@kielce.bikestores.org",
                            Firstname = "Julian",
                            Lastname = "Pracownik",
                            ManagerId = 4,
                            Phone = "+48654234202",
                            StoreId = 2,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 771, DateTimeKind.Local).AddTicks(4870)
                        },
                        new
                        {
                            Id = 6,
                            Active = (byte)1,
                            CreatedBy = "system",
                            Email = "krzysztof.pracownik.radom@bikestores.org",
                            Firstname = "Krzysztof",
                            Lastname = "Pracownik",
                            ManagerId = 5,
                            Phone = "+48654234201",
                            StoreId = 2,
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 771, DateTimeKind.Local).AddTicks(4872)
                        });
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("store_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("street");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_created");

                    b.Property<DateTime?>("WhenModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("when_modified");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.ToTable("stores", "sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Radom",
                            CreatedBy = "system",
                            Email = "radom@bikestores.org",
                            Name = "Sklep w Radomiu",
                            Phone = "+48654234200",
                            State = "Mazowieckie",
                            Street = "Wiejska 14",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 772, DateTimeKind.Local).AddTicks(4412),
                            ZipCode = "26606"
                        },
                        new
                        {
                            Id = 2,
                            City = "Kielce",
                            CreatedBy = "system",
                            Email = "kielce@bikestores.org",
                            Name = "Sklep w Kielcach",
                            Phone = "+22456543200",
                            State = "Swietokrzyskie",
                            Street = "Kwarcowa 12/4",
                            WhenCreated = new DateTime(2023, 12, 23, 19, 37, 27, 772, DateTimeKind.Local).AddTicks(4426),
                            ZipCode = "25741"
                        });
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Production.Product", b =>
                {
                    b.HasOne("BikeStores.Domain.Entities.Production.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Brands");

                    b.HasOne("BikeStores.Domain.Entities.Production.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Products_Categories");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Production.Stock", b =>
                {
                    b.HasOne("BikeStores.Domain.Entities.Production.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Stocks_Products");

                    b.HasOne("BikeStores.Domain.Entities.Sales.Store", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Stocks_Stores");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Order", b =>
                {
                    b.HasOne("BikeStores.Domain.Entities.Sales.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Customers_Orders");

                    b.HasOne("BikeStores.Domain.Entities.Sales.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Staffs_Orders");

                    b.HasOne("BikeStores.Domain.Entities.Sales.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Stores");

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.OrderItem", b =>
                {
                    b.HasOne("BikeStores.Domain.Entities.Sales.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_OrderItems");

                    b.HasOne("BikeStores.Domain.Entities.Production.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Products_OrderItems");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Staff", b =>
                {
                    b.HasOne("BikeStores.Domain.Entities.Sales.Staff", "Manager")
                        .WithMany("Subordinate")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Staffs_Manager");

                    b.HasOne("BikeStores.Domain.Entities.Sales.Store", "Store")
                        .WithMany("Staffs")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Staffs_Stores");

                    b.Navigation("Manager");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Production.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Production.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Production.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Staff", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Subordinate");
                });

            modelBuilder.Entity("BikeStores.Domain.Entities.Sales.Store", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Staffs");

                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
